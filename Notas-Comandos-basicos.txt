################################## COMANDOS BASICOS ##################################
El comando git init = Iniciar Git en una carpeta.
git config = Configuraciones de Git.
git config --list = Lista la configuracion por defecto de Git.
git config --global tipo.parametro "Valor del parametro" = Agrega un valor a un parametro de las configuraciones globales de Git.

(Comandos de archivo en stage)
 ## Staging == Area en memoria RAM donde se van almacenando los cambios ##
git status = Muestra el estado del proyecto.
git add archivo.ext = trackea el archivo para registrar sus cambios (lo lleva a staging).
get add . = trackea todo el contenido de la carpeta.
git rm --cashed archivo.ext = elimina el archivo del tracking.

(Comandos de archivo en repositorio)
## repositorio == carpeta /.git/ ##
git commit -m "Mensaje commit del archivo" = Envia los cambios a un repositorio junto con un mensaje que informa esos cambios.
git log archivo.ext = Muestra la historia del archivo.
git log --stat = Recuento de los cambios que se hicieron a cada archivo.
git show archivo.ext = Muesta los cambios hechos al archivo.
git diff serial_commit1 serial_commit2 = Compara dos versiones del archivo.

git checkout serial_commit/master archivo.ext == trae del repositorio al directorio una version del archivo o en el caso de master la ultima versión a la que se le hizo commit.
## merge es unir versiones de distintas ramas en un archivo HEAD (version más reciente del archivo en la ramas MASTER).
## merge puede llegar a producir "conflictos entre archivos".
ramas = {Master: master; development: experimentos; hotfix: bugfixing}.

git reset serial_commit --hard = Regresa el archivo del directorio a una versión anterior traida desde el repositorio. También borra el log.
git reset serial_commit --soft = A diferencia del hard, soft mantiene los cambios que con add quedaron en Staging.

################################## FLUJO DE TRABAJO ##################################

(Flujo de trabajo respositorio local)
    git init
    Directorio de trabajo
        git add (...)
    Staging
        git commit -m "..."
    Repositorio local


(Flujo de trabajo respositorio remoto)
    git colne url //Clona un repositorio remoto a un directorio local y al repositorio local, junto con la base de datos de versiones.

    Repositorio local
        git push
    repositorio remoto


    Repositorio remoto
        git fecth // Trae una actualización de un repositorio remoto a un repositorio local
    Repositorio local
        git merge // Fusiona la ultima versión que está en el repositorio local con los archivos en el directorio de trabajo
    Directorio de trabajo


    git pull //Copia acltualizada de un repositorio remoto a un repositorio y directorio local 

    git commit -am "..." = Hace el add y el commit en un solo paso, siempre que los archivos hayan sido trackeados en veriosnes previas.

    // RAMAS //

    git branch = muestra las ramas.
    git branch nombre = Crear una rama.
    git checkout nombre_rama = cambia de rama.
    git show-branch = ramas que existen y su historia
    git show-branch --all = Igual que el de arriba, pero más completo
    git branch -r = muestra las ramas remotas | git branch -a = muestra todas las ramas.

    git merge rama_a_fusionar = Fusiona una rama a la rama en la que nos encontramos actualmente.


    // CONFLICTOS //

    <<<<< = Indican donde se encuetra (hacia donde se hace el merge) | cambio actual.

    >>>>> = Indincan de donde vienen (desde donde nace el conflicto) | cambio que viene.

    Luego de solucionar los conflictos se realiza un commit -am.

   


    ################################## USO DE GITHUB ##################################

    git remote add origin (HTTPS) = Agrega nuestros archivos desde un repositorio remoto.
    git remote -v = muestra las opcione del repositorio creado.
    git branch -M main = Mueve todo de master a main
    git push origin main = Envia el directorio de trabajo y el repositorio local al repositorio remoto
    git pull origin main --allow-unrelated-histories = Permite fusionar el repositorio remoto con el local aunque hayan archivos no relacionados para poder hacer pull posteriormente.


    ################################## CONFIGURAR SSH ##################################

    (En el home)

    ssh-keygen -t rsa -b 4096 -C "correo@github" = Crea las llaves ssh publica y privada
    eval $(ssh-agent -s) = evalua si el agente ssh funciona.
    ssh-add /home/usuario/.ssh/id_rsa = añade la llave ssh al sistema operativo.
    git remote set-url origin (url ssh del repositorio) = vincula el repositorio por ssh (para comprobar usar git remot -v)
    git log --all --graph --decorate --oneline = Muestra toda la historia del proyecto formateada


    ################################## TAGS Y VERSIONES ##################################

    alias nombre="comando" = almacena un comando en una variable
    git tag = muestra los tags existentes
    git tag -d nombre = Elimina el tag
    git tag -a (nombre=v0.1) -m "Mensaje" versiónID = Asigna un tag a un commit (en esto caso el tag es v1.0)
    git show-ref --tags = tag asignados a los commits
    git push origin --tags = enviar los tags al repositorio remoto
    git push origin :refs/tags/nombre = elimina el tag en Gitub

    ################################## FORK ##################################

    (GitHub) -Fork/Clone-
    git colen url_del_repositorio = clona un repositorio remoto a un directorio local.
    git remote add upstream url_del_repositorio = Crea una rama (upstream), fuente de datos, para hacer pull a los cambios del repositorio original y tenerlos en el directorio.
    git pull upstream main = Trae todos los cambios a una rama upstream
    gut commit -am "" 
    git push origin master = Termina de fusionar las ramas.

    ################################## Gitignore ##################################
    
    Archivo de nombre .gitignore que se utiliza para indicar que archivos y directorios no serán subidos al repositorio.

    ################################## git commands ##################################
    
    Git stash es como decirle a un cambio “No, no avances. Ya te digo qué hacer”.

    git stash = Revierte y almacena los cambios.
    git stash drop = Descarta los cambios almacenados0
    git stash pop = Restaura los cambios almacenados.
    git stash list = Lista lo que se encuentra en stash.
    git stash branch nombre_rama = envía los cambios almacenados a otra rama. 

    git clean --dry-run = Elimina los archivos que estan dentro del directorio, pero no se han trackeado aún.

    git cherry-pick commit_id = Incorpora un unico commit previo a a la rama en la que nos encontremos.

    git commit --amend = Luego de hacer un add amend permite agregar más cambios al commit anterior.

    git reflog = super git log

    git grep palabra = busca entre los archivos donde aparece la palabra | el parametro -n muestra la linea en la que se encuentra la palabra dentro del archivo | -c cuenta el numero de apariciones.
    git log -S "palabra" = Busca entre los commits en cuales se uso una palabra.

